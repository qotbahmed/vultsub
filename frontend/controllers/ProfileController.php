<?php

namespace frontend\controllers;

use api\helpers\ImageHelper;
use api\helpers\ResponseHelper;
use backend\models\search\UserSearch;
use common\models\Package;
use common\models\Subscription;
use common\models\SubscriptionDetails;
use common\models\UserProfile;
use frontend\models\search\ProfileSearch;
use frontend\models\SubscriptionForm;
use Yii;
use common\models\User;
use yii\base\InvalidParamException;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * UserController implements the CRUD actions for User model.
 */
class ProfileController extends FrontController
{
    public function beforeAction($action)
    {
        $this->checkAccess(); // Check if user is logged in

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    private function checkAccess()
    {
        if (Yii::$app->user->isGuest) {
            // Redirect to the login page
            Yii::$app->response->redirect(['sign-in/login'])->send();
            Yii::$app->end(); // Stop further processing
        }
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all User models.
     * @return mixed
     */
    public function actionIndex()
    {
        $id = Yii::$app->user->identity->id;
        $parent = User::findOne($id);

        $users = User::find()->where(['user_type' => User::USER_TYPE_PLAYER])
            ->andWhere(['!=', 'status', User::STATUS_DELETED])
            ->andWhere(['parent_id' => Yii::$app->user->identity->id])
            ->orderBy(['id' => SORT_DESC])->all();

        return $this->render('index', [
            'users' => $users,
            'parent' => $parent,
            'academy' => $this->academy,
        ]);
    }

    /**
     * Displays a single User model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $model = $this->findModel($id);

        return $this->render('view', [
            'model' => $this->findModel($id),

        ]);
    }

    /**
     * Creates a new User model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    // public function actionCreate()
    // {
    //     Yii::$app->layout='base';
    //     $model = new User();
    //     $profile = new UserProfile();
    //     $render_data = [
    //         'model' => $model,
    //         'profile' => $profile
    //     ];

    //     $profile->locale = 'en-US';
    //     $model->status = User::STATUS_ACTIVE;
    //     $model->password_hash = Yii::$app->security->generatePasswordHash('default_password');
    //     $model->user_type = 1;
    //     $model->parent_id = Yii::$app->user->id;

    //     if (empty($model->username)) {
    //         $model->username = 'player_' . uniqid();
    //     }
    //     if (empty($model->email)) {
    //         $model->email = $model->username . '@example.com';
    //     }

    //     if ($model->load(Yii::$app->request->post()) && $model->save()) {
    //         $profile->user_id = $model->id;
    //         $profile->academy_id = $model->userProfile->academy_id;
    //         $profile->load(Yii::$app->request->post());

    //         if (!empty($playerData['image_binary'])) {
    //             try {
    //                 $filename = ImageHelper::Base64Image($playerData['image_binary']);
    //                 $profile->avatar_base_url = \Yii::getAlias('@storageUrl') . '/source/';
    //                 $profile->avatar_path = 'profile/' . $filename;
    //             } catch (InvalidParamException $e) {
    //                 $model->delete();
    //                 return ResponseHelper::sendFailedResponse(['binary_picture' => $e->getMessage()]);
    //             }
    //         }

    //         if (!$profile->save(false)) {
    //             $model->delete();
    //            // return ResponseHelper::sendFailedResponse($profile->errors, 400);
    //         }else{
    //             $model->close = 1;
    //         }


    //     }

    //     return $this->render('create',  [ 'model' => $model,
    //         'profile' => $profile]);
    // }
    public function actionCreate()
{
    Yii::$app->layout = 'base';
    $model = new User();
    $profile = new UserProfile();

    $parentUser = User::findOne(Yii::$app->user->id);
    $parentProfile = $parentUser->userProfile;

    $profile->locale = 'en-US';
    $model->status = User::STATUS_ACTIVE;
    $model->password_hash = Yii::$app->security->generatePasswordHash('default_password');
    $model->user_type = 1;
    $model->parent_id = Yii::$app->user->id;

    if (empty($model->username)) {
        $model->username = 'player_' . uniqid();
    }
    if (empty($model->email)) {
        $model->email = $model->username . '@example.com';
    }

    if ($model->load(Yii::$app->request->post()) && $model->save()) {
        $profile->user_id = $model->id;
        
        $profile->academy_id = $parentProfile->academy_id;

        $profile->load(Yii::$app->request->post());

        if (!empty($playerData['image_binary'])) {
            try {
                $filename = ImageHelper::Base64Image($playerData['image_binary']);
                $profile->avatar_base_url = \Yii::getAlias('@storageUrl') . '/source/';
                $profile->avatar_path = 'profile/' . $filename;
            } catch (InvalidParamException $e) {
                $model->delete();
                return ResponseHelper::sendFailedResponse(['binary_picture' => $e->getMessage()]);
            }
        }

        if (!$profile->save(false)) {
            $model->delete();
        } else {
            $model->close = 1;
        }
    }

    return $this->render('create', [
        'model' => $model,
        'profile' => $profile,
    ]);
}


    public function actionGetPackages()
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        $sportId = Yii::$app->request->post('sportId');
        $academy_id = Yii::$app->request->post('academy_id');
        if ($sportId) {
            // Fetch packages based on sportId
            $packages = Package::find()
                ->where(['sport_id' => $sportId])
                ->andWhere(['academy_id' => $academy_id])
                ->asArray()
                ->all();

            return ['packages' => $packages];
        }

        return ['packages' => []];
    }


    public function actionSubscription()
    {
        Yii::$app->layout='base';

        $model = new SubscriptionForm();
        $render_data = [
            'model' => $model,
        ];

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {

            $total_amount = 0;


            $player = User::findOne(['id' => $model->player_id]);

            $sports_id = $model->sport_id;
            $packages_id = $model->packages_id;
            $start_date = $model->start_date ?? date('Y-m-d');
            $end_date = date('Y-m-d', strtotime('+1 month', strtotime($start_date)));
            $existingSubscriptionDetail = SubscriptionDetails::find()
                ->where([
                    'player_id' => $player->id,
                    'sports_id' => $sports_id,
                    'packages_id' => $packages_id,
                    'start_date' => $start_date,
                ])->one();

            if ($existingSubscriptionDetail) {
                $model->addError('error', $existingSubscriptionDetail->firstErrors);

                return $this->render('subscription', $render_data);

            }
            if (!$model->subscription_id) {
                $model->subscription_id = $model->initSubscription();
            }

            $subscription = Subscription::findOne(['id' => $model->subscription_id]);


            $subscriptionDetail = new SubscriptionDetails();
            $subscriptionDetail->player_id = $player->id;
            $subscriptionDetail->sports_id = $sports_id;
            $subscriptionDetail->packages_id = $packages_id;
            $subscriptionDetail->subscription_id = $subscription->id;
            $subscriptionDetail->start_date = $start_date;
            $subscriptionDetail->end_date = $end_date;
            $subscriptionDetail->getPackageDetails();

            if (!$subscriptionDetail->save()) {
                $model->addError('error', $subscriptionDetail->firstErrors);

                return $this->render('subscription', $render_data);

            }

            $total_amount += $subscriptionDetail->amount;
            $subscription->price_before_discount += $total_amount;

            if (!$subscription->save()) {
                $model->addError('error', $subscription->firstErrors);
                return $this->render('subscription', $render_data);

            }

            $subscription->calculateTotalPrice();
            if (Yii::$app->request->post('add-another-child') !== null) {

                $model = new SubscriptionForm();
                $model->subscription_id = $subscription->id;
                $model->close = 0; // Reset to allow adding another child
                $render_data = [
                    'model' => $model,
                ];
                if (Yii::$app->request->isAjax) {
                    return $this->renderAjax('subscription', $render_data);
                } else {
                    return $this->render('subscription', $render_data);
                }
            } else {

                $model->close = 1; // Close the form or mark it as completed
            }


        }

        return $this->render('subscription',  [ 'model' => $model]);

    }


    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $render_data = [
            'model' => $model
        ];

        if ($model->loadAll(Yii::$app->request->post()) && $model->saveAll()) {

            Yii::$app->getSession()->setFlash('success', [
                'type' => 'success',
                'message' => Yii::t('backend', 'User was successfuly updated'),
            ]);
            Yii::$app->getSession()->setFlash('alert', [
                'type' => 'success',
                'body' => Yii::t('backend', 'Data has been updated successfully'),
                'title' => '',
            ]);

            if (!Yii::$app->request->isAjax) {
                return $this->redirect(['index']);
            }
        }
        if (Yii::$app->request->isAjax) {
            return $this->renderAjax('update', $render_data);
        } else {
            return $this->render('update', $render_data);
        }
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->deleteWithRelated();

        return $this->redirect(['index']);
    }

    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException(Yii::t('backend', 'The requested page does not exist.'));
        }
    }


}
